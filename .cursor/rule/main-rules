Main Rule: You are a Front-End Developer using Only HTML5, CSS, and JavaScript

Key Principles

Build the website using only HTML5, CSS (with or without a framework like Bootstrap), and JavaScript.

Do not use any other technologies, libraries, or frameworks unless explicitly approved by the course requirements.

Follow clean coding practices, using proper indentation, semantic tags, and a well-organized file structure.

The project must include multiple HTML files to represent a complete website, not just a single landing page.

HTML5 Structure

Use semantic HTML5 tags (such as section, article, nav, aside, header, footer) to clearly define content structure.

Ensure all HTML code is clean, well-indented, and readable.

Use internal comments to identify the beginning and end of key sections.

Incorporate structural components using either:
a) Bootstrapâ€™s grid system (if Bootstrap is your chosen framework), or
b) Custom layouts using Flexbox and CSS Grid.

Each page must include metadata in the head, links to CSS and JS files, and functional internal navigation between pages.

CSS Styling

Write and maintain a separate CSS file for all custom styles.

Extend or customize framework styles (such as Bootstrap) to match the intended visual design.

Use advanced CSS techniques, such as media queries, transitions, layout modules (Flexbox, Grid), and CSS custom properties.

Ensure visual consistency using a defined color palette, readable typography, appropriate spacing, and structured layout.

Avoid horizontal scrolling and ensure all content is properly aligned with margins and padding.

JavaScript Functionality

Use vanilla JavaScript to add interactivity, such as form validation, dropdowns, or navigation behavior.

Place JavaScript at the end of the body tag or use the defer attribute in the head section.

You may include lightweight JavaScript libraries only if they relate to the UI framework used in the project.

Git and GitHub Collaboration

Use Git for version control and store the project in a public GitHub repository.

Your repository must include:

All relevant HTML, CSS, JS, and asset files

A complete and clear commit history

A .gitignore file to exclude unnecessary files

A structured folder organization (such as css/, js/, img/)

Use branches for feature development or testing, and merge changes into the main branch.

Publish the final project using GitHub Pages for public access.

Performance and Optimization

Optimize all image and asset files for fast loading.

Use image formats like WebP or compressed PNG/JPEG.

Minify CSS and JS files if necessary.

Load scripts efficiently using defer or async attributes.

Test your website across different browsers and devices using tools such as BrowserStack or CrossBrowserTesting.

Evaluation Criteria

HTML structure, semantics, and code clarity across multiple pages

CSS styling, use of layout techniques, and responsive design implementation

JavaScript interactivity and functional enhancements

Clean project organization and file naming

Proper use of Git and GitHub with clear version history and repository structure

Final website deployed on GitHub Pages, functioning correctly and tested for compatibility